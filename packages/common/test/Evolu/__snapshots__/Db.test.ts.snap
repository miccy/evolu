// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`WebSocket > sends messages when socket is opened 2`] = `
[
  "select sqlite_master.name as tableName, table_info.name as columnName from sq...",
  "select name, sql from sqlite_master where type = 'index' and name not like 's...",
  "create table evolu_version ( "protocolVersion" integer not null ) strict;",
  "insert into evolu_version ("protocolVersion") values (?);",
  "create table evolu_config ( "clock" text not null, "appOwnerId" text not null...",
  "insert into evolu_config ( "clock", "appOwnerId", "appOwnerEncryptionKey", "a...",
  "create table evolu_history ( "ownerId" blob not null, "table" text not null, ...",
  "create index evolu_history_ownerId_timestamp on evolu_history ( "ownerId", "t...",
  "create unique index evolu_history_ownerId_table_id_column_timestampDesc on ev...",
  "create table "testTable" ( "id" text primary key, "name" blob, "createdAt" bl...",
  "create table "_localTable" ( "id" text primary key, "value" blob, "createdAt"...",
  "create table if not exists evolu_timestamp ( "ownerId" blob not null, "t" blo...",
  "create index if not exists evolu_timestamp_index on evolu_timestamp ( "ownerI...",
  "with lastTimestamp as ( select "timestamp" from evolu_history where "ownerId"...",
  "select min(t) as minT, max(t) as maxT from evolu_timestamp where ownerId = ?;",
  "insert into evolu_timestamp (ownerId, l, t, h1, h2, c) values (?, 1, ?, ?, ?,...",
  "with p(l, t, h1, h2) as ( select ( select max(l) + 1 from evolu_timestamp whe...",
  "insert into evolu_history ("ownerId", "table", "id", "column", "value", "time...",
  "update evolu_config set "clock" = ?;",
  "with ml(ml) as ( select max(l) from evolu_timestamp where ownerId = ? ), sc(l...",
  "with fi(b, cl, ic, pt, mt, nt, nc) as ( select 0, ( select max(l) from evolu_...",
]
`;

exports[`initializes DbWorker with external AppOwner 2`] = `
[
  "select sqlite_master.name as tableName, table_info.name as columnName from sq...",
  "select name, sql from sqlite_master where type = 'index' and name not like 's...",
  "create table evolu_version ( "protocolVersion" integer not null ) strict;",
  "insert into evolu_version ("protocolVersion") values (?);",
  "create table evolu_config ( "clock" text not null, "appOwnerId" text not null...",
  "insert into evolu_config ( "clock", "appOwnerId", "appOwnerEncryptionKey", "a...",
  "create table evolu_history ( "ownerId" blob not null, "table" text not null, ...",
  "create index evolu_history_ownerId_timestamp on evolu_history ( "ownerId", "t...",
  "create unique index evolu_history_ownerId_table_id_column_timestampDesc on ev...",
  "create table "testTable" ( "id" text primary key, "name" blob, "createdAt" bl...",
  "create table "_localTable" ( "id" text primary key, "value" blob, "createdAt"...",
  "create table if not exists evolu_timestamp ( "ownerId" blob not null, "t" blo...",
  "create index if not exists evolu_timestamp_index on evolu_timestamp ( "ownerI...",
  "select sqlite_master.name as tableName, table_info.name as columnName from sq...",
  "select name, sql from sqlite_master where type = 'index' and name not like 's...",
  "select * from "evolu_version";",
  "select * from "evolu_config";",
  "select * from "evolu_history";",
  "select * from "testTable";",
  "select * from "_localTable";",
  "select * from "evolu_timestamp";",
]
`;

exports[`local mutations 8`] = `
[
  "select sqlite_master.name as tableName, table_info.name as columnName from sq...",
  "select name, sql from sqlite_master where type = 'index' and name not like 's...",
  "create table evolu_version ( "protocolVersion" integer not null ) strict;",
  "insert into evolu_version ("protocolVersion") values (?);",
  "create table evolu_config ( "clock" text not null, "appOwnerId" text not null...",
  "insert into evolu_config ( "clock", "appOwnerId", "appOwnerEncryptionKey", "a...",
  "create table evolu_history ( "ownerId" blob not null, "table" text not null, ...",
  "create index evolu_history_ownerId_timestamp on evolu_history ( "ownerId", "t...",
  "create unique index evolu_history_ownerId_table_id_column_timestampDesc on ev...",
  "create table "testTable" ( "id" text primary key, "name" blob, "createdAt" bl...",
  "create table "_localTable" ( "id" text primary key, "value" blob, "createdAt"...",
  "create table if not exists evolu_timestamp ( "ownerId" blob not null, "t" blo...",
  "create index if not exists evolu_timestamp_index on evolu_timestamp ( "ownerI...",
  "insert into "_localTable" ("id", "value", createdAt, updatedAt) values (?, ?,...",
  "select * from "_localTable" where "isDeleted" is null",
  "select sqlite_master.name as tableName, table_info.name as columnName from sq...",
  "select name, sql from sqlite_master where type = 'index' and name not like 's...",
  "select * from "evolu_version";",
  "select * from "evolu_config";",
  "select * from "evolu_history";",
  "select * from "testTable";",
  "select * from "_localTable";",
  "select * from "evolu_timestamp";",
  "select * from "_localTable" where "isDeleted" is null",
  "delete from "_localTable" where id = ?;",
  "select * from "_localTable" where "isDeleted" is null",
  "select sqlite_master.name as tableName, table_info.name as columnName from sq...",
  "select name, sql from sqlite_master where type = 'index' and name not like 's...",
  "select * from "evolu_version";",
  "select * from "evolu_config";",
  "select * from "evolu_history";",
  "select * from "testTable";",
  "select * from "_localTable";",
  "select * from "evolu_timestamp";",
  "select sqlite_master.name as tableName, table_info.name as columnName from sq...",
  "select name, sql from sqlite_master where type = 'index' and name not like 's...",
  "drop table "evolu_version";",
  "drop table "evolu_config";",
  "drop table "evolu_history";",
  "drop table "testTable";",
  "drop table "_localTable";",
  "drop table "evolu_timestamp";",
  "select sqlite_master.name as tableName, table_info.name as columnName from sq...",
  "select name, sql from sqlite_master where type = 'index' and name not like 's...",
]
`;

exports[`sync mutations 9`] = `
[
  "select sqlite_master.name as tableName, table_info.name as columnName from sq...",
  "select name, sql from sqlite_master where type = 'index' and name not like 's...",
  "create table evolu_version ( "protocolVersion" integer not null ) strict;",
  "insert into evolu_version ("protocolVersion") values (?);",
  "create table evolu_config ( "clock" text not null, "appOwnerId" text not null...",
  "insert into evolu_config ( "clock", "appOwnerId", "appOwnerEncryptionKey", "a...",
  "create table evolu_history ( "ownerId" blob not null, "table" text not null, ...",
  "create index evolu_history_ownerId_timestamp on evolu_history ( "ownerId", "t...",
  "create unique index evolu_history_ownerId_table_id_column_timestampDesc on ev...",
  "create table "testTable" ( "id" text primary key, "name" blob, "createdAt" bl...",
  "create table "_localTable" ( "id" text primary key, "value" blob, "createdAt"...",
  "create table if not exists evolu_timestamp ( "ownerId" blob not null, "t" blo...",
  "create index if not exists evolu_timestamp_index on evolu_timestamp ( "ownerI...",
  "with lastTimestamp as ( select "timestamp" from evolu_history where "ownerId"...",
  "with lastTimestamp as ( select "timestamp" from evolu_history where "ownerId"...",
  "select min(t) as minT, max(t) as maxT from evolu_timestamp where ownerId = ?;",
  "insert into evolu_timestamp (ownerId, t, l) values (?, ?, ?) on conflict do n...",
  "with c0(b, cl, pt, nt, h1, h2, c) as ( select 0, ( select max(l) from evolu_t...",
  "insert into evolu_history ("ownerId", "table", "id", "column", "value", "time...",
  "insert into evolu_history ("ownerId", "table", "id", "column", "value", "time...",
  "update evolu_config set "clock" = ?;",
  "select * from "testTable" where "isDeleted" is null",
  "select sqlite_master.name as tableName, table_info.name as columnName from sq...",
  "select name, sql from sqlite_master where type = 'index' and name not like 's...",
  "select * from "evolu_version";",
  "select * from "evolu_config";",
  "select * from "evolu_history";",
  "select * from "testTable";",
  "select * from "_localTable";",
  "select * from "evolu_timestamp";",
  "with lastTimestamp as ( select "timestamp" from evolu_history where "ownerId"...",
  "insert into evolu_timestamp (ownerId, l, t, h1, h2, c) values (?, 1, ?, ?, ?,...",
  "insert into evolu_history ("ownerId", "table", "id", "column", "value", "time...",
  "update evolu_config set "clock" = ?;",
  "select * from "testTable" where "isDeleted" is null",
  "select sqlite_master.name as tableName, table_info.name as columnName from sq...",
  "select name, sql from sqlite_master where type = 'index' and name not like 's...",
  "select * from "evolu_version";",
  "select * from "evolu_config";",
  "select * from "evolu_history";",
  "select * from "testTable";",
  "select * from "_localTable";",
  "select * from "evolu_timestamp";",
  "with lastTimestamp as ( select "timestamp" from evolu_history where "ownerId"...",
  "insert into evolu_timestamp (ownerId, l, t, h1, h2, c) values (?, 1, ?, ?, ?,...",
  "insert into evolu_history ("ownerId", "table", "id", "column", "value", "time...",
  "update evolu_config set "clock" = ?;",
  "select * from "testTable" where "isDeleted" is null",
  "select sqlite_master.name as tableName, table_info.name as columnName from sq...",
  "select name, sql from sqlite_master where type = 'index' and name not like 's...",
  "select * from "evolu_version";",
  "select * from "evolu_config";",
  "select * from "evolu_history";",
  "select * from "testTable";",
  "select * from "_localTable";",
  "select * from "evolu_timestamp";",
  "select sqlite_master.name as tableName, table_info.name as columnName from sq...",
  "select name, sql from sqlite_master where type = 'index' and name not like 's...",
  "drop table "evolu_version";",
  "drop table "evolu_config";",
  "drop table "evolu_history";",
  "drop table "testTable";",
  "drop table "_localTable";",
  "drop table "evolu_timestamp";",
  "select sqlite_master.name as tableName, table_info.name as columnName from sq...",
  "select name, sql from sqlite_master where type = 'index' and name not like 's...",
]
`;
